#!/bin/bash
# Ultimate Color Script 
# GENERATED BY AI

# --- Config Paths ---
WALLPAPER_CACHE="$HOME/.cache/swww_last_wallpaper"
HYPRLAND_COLORS="$HOME/.config/hypr/hyprland_colors.conf"
CSS_COLORS="$HOME/.config/resources/colors.css"
SCSS_COLORS="$HOME/.config/resources/colors.scss"
KITTY_THEME="$HOME/.config/kitty/pywal_theme.conf"
MAKO_CONFIG="$HOME/.config/mako/config"
STATE_FILE="$HOME/.cache/color_script_state"

# --- Default Values ---
MODE="colors"
ACCENT_INDEX=1

# --- Helper Functions ---
show_help() {
    echo "Usage: $0 [OPTIONS] [WALLPAPER]"
    echo
    echo "Options:"
    echo "  -h            Show this help message"
    echo "  -m MODE       Set color mode: 'colors' or 'bw'"
    echo "  -c INDEX      Set accent color index (0-15)"
    echo
    echo "Examples:"
    echo "  $0 -m bw -c 3 ~/wall.png  # B/W with color3 accent"
    echo "  $0 -m colors ~/wall.png    # Colorful with last accent"
    exit 0
}

hex_to_rgba() {
    local hex="${1#'#'}"
    [[ ${#hex} == 3 ]] && hex="${hex:0:1}${hex:0:1}${hex:1:1}${hex:1:1}${hex:2:1}${hex:2:1}"
    echo "rgba(${hex}ff)"
}

darken_hex() {
    local hex="${1#'#'}" percent="$2"
    [[ ${#hex} == 3 ]] && hex="${hex:0:1}${hex:0:1}${hex:1:1}${hex:1:1}${hex:2:1}${hex:2:1}"
    
    printf "#%02x%02x%02x" \
        $(( (16#${hex:0:2}) * (100 - percent) / 100 )) \
        $(( (16#${hex:2:2}) * (100 - percent) / 100 )) \
        $(( (16#${hex:4:2}) * (100 - percent) / 100 ))
}

load_state() {
    if [[ -f "$STATE_FILE" ]]; then
        source "$STATE_FILE"
    fi
}

save_state() {
    echo "MODE='$MODE'" > "$STATE_FILE"
    echo "ACCENT_INDEX=$ACCENT_INDEX" >> "$STATE_FILE"
}

reload_eww() {
    if pgrep eww >/dev/null; then
        eww reload 2>/dev/null || \
        { killall eww 2>/dev/null; } || \
        echo "EWW reload failed" >&2
    fi
}

update_kitty() {
    if command -v kitty >/dev/null; then
        # Сначала создаем временный файл
        local temp_theme=$(mktemp)
        cat > "$temp_theme" <<EOF
background ${BG}
foreground ${FG}
cursor ${ACCENT}
selection_background ${ACCENT_DARK}
color0 ${COLORS[0]}
color1 ${COLORS[1]}
color2 ${COLORS[2]}
color3 ${COLORS[3]}
color4 ${COLORS[4]}
color5 ${COLORS[5]}
color6 ${COLORS[6]}
color7 ${COLORS[7]}
color8 $(darken_hex "${COLORS[0]#\#}" 20)
color9 $(darken_hex "${COLORS[1]#\#}" 20)
color10 $(darken_hex "${COLORS[2]#\#}" 20)
color11 $(darken_hex "${COLORS[3]#\#}" 20)
color12 $(darken_hex "${COLORS[4]#\#}" 20)
color13 $(darken_hex "${COLORS[5]#\#}" 20)
color14 $(darken_hex "${COLORS[6]#\#}" 20)
color15 ${COLORS[15]}
EOF
        
        cp "$temp_theme" "$KITTY_THEME"
        kitty @ set-colors --all --configured "$KITTY_THEME" >/dev/null 2>&1
        rm "$temp_theme"
    fi
}

update_mako() {
    if command -v mako >/dev/null && [[ -f "$MAKO_CONFIG" ]]; then
        # Load wal colors
        . "${HOME}/.cache/wal/colors.sh"
        
        # Associative array, color name -> color code.
        declare -A colors
        colors=(
            ["background-color"]="${background}89"
            ["text-color"]="$foreground"
            ["border-color"]="$color13"
        )

        for color_name in "${!colors[@]}"; do
            # replace first occurance of each color in config file
            sed -i "0,/^$color_name.*/{s//$color_name=${colors[$color_name]}/}" "$MAKO_CONFIG"
        done

        makoctl reload
    fi
}

# --- Main Script ---

# Load saved state
load_state

# Parse arguments
while getopts "hm:c:" opt; do
    case $opt in
        h) show_help ;;
        m) 
            if [[ "$OPTARG" =~ ^(colors|bw)$ ]]; then
                MODE="$OPTARG"
            else
                echo "Invalid mode: $OPTARG (use 'colors' or 'bw')" >&2
                exit 1
            fi
            ;;
        c) 
            if [[ "$OPTARG" =~ ^[0-9]{1,2}$ && "$OPTARG" -le 15 ]]; then
                ACCENT_INDEX="$OPTARG"
            else
                echo "Invalid accent index: $OPTARG (0-15)" >&2
                exit 1
            fi
            ;;
        *) echo "Invalid option: -$OPTARG" >&2; exit 1 ;;
    esac
done
shift $((OPTIND-1))

# Save current settings
save_state

# Handle wallpaper
WALLPAPER="${1:-$(cat "$WALLPAPER_CACHE" 2>/dev/null)}"
if [[ -z "$WALLPAPER" ]]; then
    echo "Error: No wallpaper specified or cached" >&2
    exit 1
fi

if ! swww img "$WALLPAPER" --transition-type any; then
    echo "Error: Failed to set wallpaper" >&2
    exit 1
fi
echo "$WALLPAPER" > "$WALLPAPER_CACHE"

# Generate colors
wal -i "$WALLPAPER" -s --iterative || echo "Using cached colors" >&2
readarray -t COLORS < ~/.cache/wal/colors

# Apply selected mode
if [[ "$MODE" == "bw" ]]; then
    BG="#000000"
    FG="#FFFFFF"
else
    BG="${COLORS[0]}"
    FG="${COLORS[15]}"
fi

ACCENT="${COLORS[$ACCENT_INDEX]}"
ACCENT_DARK=$(darken_hex "${ACCENT#'#'}" 20)
ACCENT_DARKER=$(darken_hex "${ACCENT#'#'}" 40)

# Generate config files
generate_configs() {
    # Hyprland
    cat > "$HYPRLAND_COLORS" <<EOF
# Generated on $(date)
# Mode: $MODE
\$background = $(hex_to_rgba "$BG")
\$foreground = $(hex_to_rgba "$FG")
\$accent = $(hex_to_rgba "$ACCENT")
\$accent_dark = $(hex_to_rgba "$ACCENT_DARK")
\$accent_darker = $(hex_to_rgba "$ACCENT_DARKER")
$(for i in {0..15}; do echo "\$color$i = $(hex_to_rgba "${COLORS[$i]}")"; done)
EOF

    # Waybar CSS
    cat > "$CSS_COLORS" <<EOF
/* Generated on $(date) */
/* Mode: $MODE */
@define-color background ${BG};
@define-color foreground ${FG};
@define-color accent ${ACCENT};
@define-color accent-dark ${ACCENT_DARK};
@define-color accent-darker ${ACCENT_DARKER};

/* Color palette */
$(for i in {0..15}; do echo "@define-color color$i ${COLORS[$i]};"; done)
EOF

    # SCSS
    cat > "$SCSS_COLORS" <<EOF
// Generated on $(date)
// Mode: $MODE
\$background: ${BG};
\$foreground: ${FG};
\$accent: ${ACCENT};
\$accent-dark: ${ACCENT_DARK};
\$accent-darker: ${ACCENT_DARKER};

// Palette
$(for i in {0..15}; do echo "\$color${i}: ${COLORS[$i]};"; done)
EOF
}

generate_configs

# --- Reload Systems ---
hyprctl reload
pkill -USR2 waybar 2>/dev/null || true
reload_eww
update_kitty
update_mako

echo "Color update complete!"
echo "Mode: $MODE"
echo "Accent: color$ACCENT_INDEX (${ACCENT})"
echo "Wallpaper: $(basename "$WALLPAPER")"
echo "Kitty theme updated live"
echo "Mako colors updated"
